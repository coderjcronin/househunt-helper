// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: createUser :one
INSERT INTO users (id, created_at, updated_at, name, email, hashed_password) 
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
) 
RETURNING id, created_at, updated_at, name, email, hashed_password
`

type createUserParams struct {
	Name           string
	Email          string
	HashedPassword string
}

func (q *Queries) createUser(ctx context.Context, arg createUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByName = `-- name: getUserByName :one
SELECT id, created_at, updated_at, name, email, hashed_password FROM users WHERE name = $1
`

func (q *Queries) getUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByUUID = `-- name: getUserByUUID :one
SELECT id, created_at, updated_at, name, email, hashed_password FROM users WHERE id = $1
`

func (q *Queries) getUserByUUID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const listUserTable = `-- name: listUserTable :many
SELECT name, email FROM users
`

type listUserTableRow struct {
	Name  string
	Email string
}

func (q *Queries) listUserTable(ctx context.Context) ([]listUserTableRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listUserTableRow
	for rows.Next() {
		var i listUserTableRow
		if err := rows.Scan(&i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const wipeUserTable = `-- name: wipeUserTable :exec
DELETE FROM users
`

func (q *Queries) wipeUserTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, wipeUserTable)
	return err
}
